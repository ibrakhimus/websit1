{"ast":null,"code":"var _jsxFileName = \"/Users/ibrakhimu/Desktop/skincare copy/src/pages/FaceScan.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\n// Import necessary MediaPipe components\nimport { FaceLandmarks } from '@mediapipe/face_landmarks';\nimport { Camera } from '@mediapipe/camera_utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaceScan = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null); // Create a ref for the canvas to draw landmarks\n\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        videoRef.current.srcObject = stream;\n\n        // Initialize the MediaPipe face landmark detector\n        const faceLandmarks = new FaceLandmarks({\n          locateFile: file => `path/to/Users/ibrakhimu/Desktop/skincare copy/src/face_landmarker.task`\n        });\n        faceLandmarks.setOptions({\n          // Configure options if necessary\n        });\n        faceLandmarks.onResults(onResults);\n\n        // Connect the camera to the MediaPipe face landmark detector\n        const camera = new Camera(videoRef.current, {\n          onFrame: async () => {\n            await faceLandmarks.send({\n              image: videoRef.current\n            });\n          },\n          width: 1280,\n          height: 720\n        });\n        camera.start();\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    };\n    startCamera();\n  }, []);\n\n  // Function to handle the results from MediaPipe\n  const onResults = results => {\n    const canvasCtx = canvasRef.current.getContext('2d');\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    canvasCtx.drawImage(results.image, 0, 0, canvasRef.current.width, canvasRef.current.height);\n    if (results.multiFaceLandmarks) {\n      for (const landmarks of results.multiFaceLandmarks) {\n        // Draw facial landmarks here\n      }\n    }\n    canvasCtx.restore();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      style: {\n        transform: 'scaleX(-1)'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 1280,\n      height: 720,\n      style: {\n        transform: 'scaleX(-1)'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(FaceScan, \"0gwqVvoOV2or9Ql4L8GH2BGn3hc=\");\n_c = FaceScan;\nexport default FaceScan;\nvar _c;\n$RefreshReg$(_c, \"FaceScan\");","map":{"version":3,"names":["React","useEffect","useRef","FaceLandmarks","Camera","jsxDEV","_jsxDEV","FaceScan","_s","videoRef","canvasRef","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","faceLandmarks","locateFile","file","setOptions","onResults","camera","onFrame","send","image","width","height","start","error","console","results","canvasCtx","getContext","save","clearRect","drawImage","multiFaceLandmarks","landmarks","restore","children","ref","autoPlay","playsInline","style","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ibrakhimu/Desktop/skincare copy/src/pages/FaceScan.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n// Import necessary MediaPipe components\nimport { FaceLandmarks } from '@mediapipe/face_landmarks';\nimport { Camera } from '@mediapipe/camera_utils';\n\nconst FaceScan = () => {\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null); // Create a ref for the canvas to draw landmarks\n\n    useEffect(() => {\n        const startCamera = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n                videoRef.current.srcObject = stream;\n\n                // Initialize the MediaPipe face landmark detector\n                const faceLandmarks = new FaceLandmarks({\n                    locateFile: (file) => `path/to/Users/ibrakhimu/Desktop/skincare copy/src/face_landmarker.task`\n                });\n\n                faceLandmarks.setOptions({\n                    // Configure options if necessary\n                });\n\n                faceLandmarks.onResults(onResults);\n\n                // Connect the camera to the MediaPipe face landmark detector\n                const camera = new Camera(videoRef.current, {\n                    onFrame: async () => {\n                        await faceLandmarks.send({ image: videoRef.current });\n                    },\n                    width: 1280,\n                    height: 720\n                });\n                camera.start();\n            } catch (error) {\n                console.error('Error accessing camera:', error);\n            }\n        };\n\n        startCamera();\n    }, []);\n\n    // Function to handle the results from MediaPipe\n    const onResults = (results) => {\n        const canvasCtx = canvasRef.current.getContext('2d');\n        canvasCtx.save();\n        canvasCtx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n        canvasCtx.drawImage(results.image, 0, 0, canvasRef.current.width, canvasRef.current.height);\n\n        if (results.multiFaceLandmarks) {\n            for (const landmarks of results.multiFaceLandmarks) {\n                // Draw facial landmarks here\n            }\n        }\n        canvasCtx.restore();\n    };\n\n    return (\n        <div>\n            <video ref={videoRef} autoPlay playsInline style={{ transform: 'scaleX(-1)' }} />\n            <canvas ref={canvasRef} width={1280} height={720} style={{ transform: 'scaleX(-1)' }} />\n        </div>\n    );\n};\n\nexport default FaceScan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}