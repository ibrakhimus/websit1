{"ast":null,"code":"var _jsxFileName = \"/Users/ibrakhimu/Desktop/skincare copy/src/pages/FaceScan.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as vision from '@mediapipe/tasks-vision';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaceLandmarkComponent = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [faceLandmarker, setFaceLandmarker] = useState(null);\n  useEffect(() => {\n    const loadModel = async () => {\n      if (typeof window['vision'] === 'undefined') {\n        console.error(\"MediaPipe Tasks Vision library not loaded\");\n        return;\n      }\n      const filesetResolver = await window.vision.FilesetResolver.forVisionTasks('https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision' // Adjust the path to your WASM files\n      );\n      const loadedFaceLandmarker = await window.vision.FaceLandmarker.createFromOptions(filesetResolver, {\n        baseOptions: {\n          modelAssetPath: 'face_landmarker.task',\n          // Adjust the path to your model\n          delegate: 'GPU'\n        },\n        runningMode: 'VIDEO',\n        numFaces: 1\n        // Additional configuration options if needed\n      });\n      setFaceLandmarker(loadedFaceLandmarker);\n    };\n    loadModel();\n  }, []);\n  useEffect(() => {\n    const startVideo = async () => {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      videoRef.current.srcObject = stream;\n    };\n    startVideo();\n  }, []);\n  useEffect(() => {\n    if (!faceLandmarker || !videoRef.current) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const processFrame = async () => {\n      if (videoRef.current.readyState < 2) {\n        requestAnimationFrame(processFrame);\n        return;\n      }\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      const results = await faceLandmarker.detect(videoRef.current);\n      if (results && results.multiFaceLandmarks) {\n        // Draw landmarks here\n        // Example: Draw a circle for each landmark\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        results.multiFaceLandmarks.forEach(landmarks => {\n          landmarks.forEach(landmark => {\n            context.beginPath();\n            context.arc(landmark.x * canvas.width, landmark.y * canvas.height, 3, 0, 2 * Math.PI);\n            context.fillStyle = 'red';\n            context.fill();\n          });\n        });\n      }\n      requestAnimationFrame(processFrame);\n    };\n    requestAnimationFrame(processFrame);\n  }, [faceLandmarker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(FaceLandmarkComponent, \"rMXsqw4FT5sX7U0uFKsGUf9cp7Q=\");\n_c = FaceLandmarkComponent;\nexport default FaceLandmarkComponent;\nvar _c;\n$RefreshReg$(_c, \"FaceLandmarkComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","vision","jsxDEV","_jsxDEV","FaceLandmarkComponent","_s","videoRef","canvasRef","faceLandmarker","setFaceLandmarker","loadModel","window","console","error","filesetResolver","FilesetResolver","forVisionTasks","loadedFaceLandmarker","FaceLandmarker","createFromOptions","baseOptions","modelAssetPath","delegate","runningMode","numFaces","startVideo","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","canvas","context","getContext","processFrame","readyState","requestAnimationFrame","width","videoWidth","height","videoHeight","results","detect","multiFaceLandmarks","clearRect","forEach","landmarks","landmark","beginPath","arc","x","y","Math","PI","fillStyle","fill","children","ref","autoPlay","playsInline","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ibrakhimu/Desktop/skincare copy/src/pages/FaceScan.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as vision from '@mediapipe/tasks-vision';\n\n\nconst FaceLandmarkComponent = () => {\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const [faceLandmarker, setFaceLandmarker] = useState(null);\n\n    useEffect(() => {\n        const loadModel = async () => {\n            if (typeof window['vision'] === 'undefined') {\n              console.error(\"MediaPipe Tasks Vision library not loaded\");\n              return;\n            }\n    \n            const filesetResolver = await window.vision.FilesetResolver.forVisionTasks(\n                'https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision' // Adjust the path to your WASM files\n            );\n    \n            const loadedFaceLandmarker = await window.vision.FaceLandmarker.createFromOptions(\n                filesetResolver, {\n                    baseOptions: {\n                        modelAssetPath: 'face_landmarker.task', // Adjust the path to your model\n                        delegate: 'GPU',\n                    },\n                    runningMode: 'VIDEO',\n                    numFaces: 1,\n                    // Additional configuration options if needed\n                }\n            );\n    \n            setFaceLandmarker(loadedFaceLandmarker);\n        };\n    \n        loadModel();\n    }, []);\n    \n\n    useEffect(() => {\n        const startVideo = async () => {\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n            videoRef.current.srcObject = stream;\n        };\n\n        startVideo();\n    }, []);\n\n    useEffect(() => {\n        if (!faceLandmarker || !videoRef.current) return;\n\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n\n        const processFrame = async () => {\n            if (videoRef.current.readyState < 2) {\n                requestAnimationFrame(processFrame);\n                return;\n            }\n\n            canvas.width = videoRef.current.videoWidth;\n            canvas.height = videoRef.current.videoHeight;\n\n            const results = await faceLandmarker.detect(videoRef.current);\n            if (results && results.multiFaceLandmarks) {\n                // Draw landmarks here\n                // Example: Draw a circle for each landmark\n                context.clearRect(0, 0, canvas.width, canvas.height);\n                results.multiFaceLandmarks.forEach(landmarks => {\n                    landmarks.forEach(landmark => {\n                        context.beginPath();\n                        context.arc(landmark.x * canvas.width, landmark.y * canvas.height, 3, 0, 2 * Math.PI);\n                        context.fillStyle = 'red';\n                        context.fill();\n                    });\n                });\n            }\n\n            requestAnimationFrame(processFrame);\n        };\n\n        requestAnimationFrame(processFrame);\n    }, [faceLandmarker]);\n\n    return (\n        <div>\n            <video ref={videoRef} autoPlay playsInline />\n            <canvas ref={canvasRef} />\n        </div>\n    );\n};\n\nexport default FaceLandmarkComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}